/**
 * Generates monotonically increasing integer ID numbers
 * @return {Number}
 */
global.getNextIntegerId = function() {
  if (!(_.get(Memory, 'commonlib.integerId') < Number.MAX_SAFE_INTEGER)) {
    _.set(Memory, 'commonlib.integerId', 0);
  }
  return ++Memory.commonlib.integerId;
};
/**
 * @return {Number} the last ID generated by getNextIntegerId()
 */
global.getLastIntegerId = function() {
  return _.get(Memory, 'commonlib.integerId', null);
};

/**
 * original source https://stackoverflow.com/a/2117523/13675
 * @return {String} RFC4122 version 4 pseudo-random UUID
 */
global.getUUID = function() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) =>{
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
};
